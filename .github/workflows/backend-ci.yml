name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'providers/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'providers/**'
      - '.github/workflows/backend-ci.yml'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.0'

jobs:
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        working-directory: backend
        run: poetry install

      - name: Install Black and isort
        working-directory: backend
        run: |
          source .venv/bin/activate
          poetry add --group dev black isort flake8 mypy bandit safety
          poetry add --group dev pytest-cov httpx pytest-asyncio

      - name: Run Black code formatter
        working-directory: backend
        run: |
          source .venv/bin/activate
          black --check --diff .

      - name: Run isort import sorter
        working-directory: backend
        run: |
          source .venv/bin/activate
          isort --check-only --diff .

      - name: Run Flake8 linter
        working-directory: backend
        run: |
          source .venv/bin/activate
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run MyPy type checker
        working-directory: backend
        run: |
          source .venv/bin/activate
          mypy . --ignore-missing-imports --no-strict-optional

      - name: Run Bandit security linter
        working-directory: backend
        run: |
          source .venv/bin/activate
          bandit -r . -f json -o bandit-report.json || true

      - name: Run Safety dependency checker
        working-directory: backend
        run: |
          source .venv/bin/activate
          safety check --json --output safety-report.json || true

      - name: Upload code quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-reports-python-${{ matrix.python-version }}
          path: |
            backend/bandit-report.json
            backend/safety-report.json

  unit-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: replyai123
          POSTGRES_DB: replyai_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: ${{ runner.os }}-poetry-backend-${{ hashFiles('backend/**/poetry.lock') }}

      - name: Install dependencies
        working-directory: backend
        run: poetry install

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Wait for Redis
        run: |
          until redis-cli -h localhost -p 6379 ping; do
            echo "Waiting for Redis..."
            sleep 2
          done

      - name: Run database migrations
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:replyai123@localhost:5432/replyai_test_db
        run: |
          source .venv/bin/activate
          python -m alembic upgrade head

      - name: Run tests with coverage
        working-directory: backend
        env:
          DATABASE_URL: postgresql://postgres:replyai123@localhost:5432/replyai_test_db
          REDIS_URL: redis://localhost:6379/0
          TEST_DATABASE_URL: postgresql://postgres:replyai123@localhost:5432/replyai_test_db
        run: |
          source .venv/bin/activate
          pytest --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    strategy:
      matrix:
        provider: [gemini, openrouter, qwen]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: ${{ runner.os }}-poetry-backend-integration-${{ hashFiles('backend/**/poetry.lock') }}

      - name: Install dependencies
        working-directory: backend
        run: poetry install

      - name: Run integration tests for ${{ matrix.provider }}
        working-directory: backend
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          QWEN_API_KEY: ${{ secrets.QWEN_API_KEY }}
        run: |
          source .venv/bin/activate
          pytest providers/${{ matrix.provider }}/tests/ -v

  security-scan:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'backend'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-push:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    outputs:
      image: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add deployment steps here

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          # Add deployment steps here